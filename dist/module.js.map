{"mappings":"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","sources":["src/index.js","src/FullScreenElement.js","src/FullScreenToggleEvent.js","src/fullscreenAPI.js","src/requestFullscreen.js","src/exitFullscreen.js","src/FullScreenToggleElement.js"],"sourcesContent":["import FullScreenElement from './FullscreenElement';\nimport FullScreenToggleElement from './FullScreenToggleElement';\nimport FullScreenToggleEvent from './FullScreenToggleEvent';\n\ncustomElements.define(FullScreenElement.tagName, FullScreenElement);\ncustomElements.define(FullScreenToggleElement.tagName, FullScreenToggleElement);\n\nexport { FullScreenElement, FullScreenToggleElement, FullScreenToggleEvent };\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport fullscreenAPI from './fullscreenAPI';\n\n/**\n * Toggles fullscreen on itself in a cross-browser-compatible way when a\n * descendant element dispatches the `full-screen-toggle` event.\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <full-screen-toggle>\n *      <button type=\"button\">\n *        Toggle Fullscreen\n *      </button>\n *    </full-screen-toggle>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n */\nexport default class FullScreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  async toggle() {\n    const { element, exitFullscreen, requestFullscreen } = fullscreenAPI;\n\n    if (element === this) {\n      return exitFullscreen();\n    }\n\n    return requestFullscreen(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener(FullScreenToggleEvent.eventName, () => this.toggle());\n  }\n}\n","export default class FullScreenToggleEvent extends Event {\n  static eventName = 'full-screen-toggle';\n\n  constructor() {\n    super(FullScreenToggleEvent.eventName, {\n      bubbles: true,\n      composed: true,\n    });\n  }\n}\n","import requestFullscreen from './requestFullscreen';\nimport exitFullscreen from './exitFullscreen';\n\nexport default {\n  get enabled() {\n    return document.fullscreenEnabled || document.webkitFullscreenEnabled;\n  },\n\n  /**\n   * @returns {Element}\n   */\n  get element() {\n    return document.fullscreenElement || document.webkitFullscreenElement;\n  },\n\n  requestFullscreen,\n  exitFullscreen,\n};\n","/**\n * @param {Element} el\n * @returns {Promise<void>}\n */\nexport default async function requestFullscreen(el) {\n  if ('requestFullscreen' in el) {\n    return el.requestFullscreen({ navigationUI: 'hide' });\n  } else if ('webkitRequestFullscreen' in el) {\n    return el.webkitRequestFullscreen({ navigationUI: 'hide' });\n  }\n}\n","/**\n * @returns {Promise<void>}\n */\nexport default function exitFullscreen() {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  }\n}\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport fullscreenAPI from './fullscreenAPI';\n\n/**\n * When the user clicks a button descendant of this element, it dispatches a\n * `full-screen-toggle` event.\n *\n * By default, the first `<button>` descendant is treated as a toggle button,\n * but buttons can be assigned behaviors using the `data-behavior` attribute,\n * set to the following values:\n *\n * - `toggle`\n * - `enter`\n * - `exit`\n *\n * ### Basic Example:\n * ```html\n *  <full-screen-toggle>\n *    <button type=\"button\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen-toggle>\n * ```\n *\n * ### Advanced Example:\n * ```html\n *   <full-screen-toggle>\n *     <button type=\"button\" data-behavior=\"enter\">Enter</button>\n *     <button type=\"button\" data-behavior=\"exit\">Exit</button>\n *   </full-screen-toggle>\n * ```\n *\n * @customElement full-screen-toggle\n */\nexport default class FullScreenToggleElement extends HTMLElement {\n  /**\n   * @readonly\n   */\n  static tagName = 'full-screen-toggle';\n\n  /**\n   * @readonly\n   */\n  static behaviors = {\n    TOGGLE: 'toggle',\n    ENTER: 'enter',\n    EXIT: 'exit',\n  };\n\n  connectedCallback() {\n    if (fullscreenAPI.enabled) {\n      this.setAttribute('supported', '');\n    }\n\n    this.attachShadow({ mode: 'open' });\n\n    if (this.shadowRoot) {\n      this.shadowRoot.innerHTML = `\n        <slot><button type=\"button\">Toggle Fullscreen</button></slot>\n      `;\n\n      this.shadowRoot\n        .querySelector('slot')\n        ?.addEventListener('click', this.#handleClick.bind(this));\n    }\n\n    const handleFullscreenChange = this.#handleFullscreenChange.bind(this);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get active() {\n    return this.hasAttribute('active');\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.hasAttribute('supported');\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const { TOGGLE, ENTER, EXIT } = FullScreenToggleElement.behaviors;\n\n    if (this.#elementHasBehavior(event.target)) {\n      const { behavior = TOGGLE } = event.target.dataset;\n\n      if (\n        (this.active && behavior === ENTER) ||\n        (!this.active && behavior === EXIT)\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n      this.dispatchEvent(new FullScreenToggleEvent());\n    }\n  }\n\n  /**\n   * @param {Element} el\n   * @returns {boolean}\n   */\n  #elementHasBehavior(el) {\n    const { TOGGLE, ENTER, EXIT } = FullScreenToggleElement.behaviors;\n    const behaviorSelector = `[data-behavior=\"${TOGGLE}\"], [data-behavior=\"${ENTER}\"], [data-behavior=\"${EXIT}\"]`;\n    const behaviorsArePresent = this.querySelector(behaviorSelector);\n\n    if (behaviorsArePresent) {\n      return Boolean(el?.closest(behaviorSelector));\n    }\n\n    return (\n      el === this.querySelector('button') ||\n      el === this.shadowRoot?.querySelector('button')\n    );\n  }\n\n  /**\n   * @returns {void}\n   */\n  #handleFullscreenChange() {\n    const isFullscreen = Boolean(fullscreenAPI.element);\n\n    if (isFullscreen) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}