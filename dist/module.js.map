{"mappings":"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","sources":["src/index.js","src/FullScreenElement.js","src/FullScreenToggleEvent.js","src/requestFullscreen.js","src/exitFullscreen.js","src/FullScreenToggleElement.js"],"sourcesContent":["import FullscreenElement from './FullscreenElement.js';\nimport FullScreenToggleElement from './FullScreenToggleElement.js';\n\ncustomElements.define(FullscreenElement.tagName, FullscreenElement);\ncustomElements.define(FullScreenToggleElement.tagName, FullScreenToggleElement);\n\nexport { FullscreenElement, FullScreenToggleElement };\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport requestFullscreen from './requestFullscreen';\nimport exitFullscreen from './exitFullscreen';\n\n/**\n *\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <full-screen-toggle>\n *      <button type=\"button\">\n *        Toggle Fullscreen\n *      </button>\n *    </full-screen-toggle>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n * @attr {String} target - ID of the HTML element to make fullscreen (optional)\n */\nexport default class FullScreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  async toggle() {\n    if (\n      document.fullscreenElement === this ||\n      document.webkitFullscreenElement === this\n    ) {\n      return exitFullscreen();\n    }\n\n    return requestFullscreen(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener(FullScreenToggleEvent.eventName, () => this.toggle());\n  }\n}\n","export default class FullScreenToggleEvent extends Event {\n  static eventName = 'full-screen-toggle';\n\n  constructor() {\n    super(FullScreenToggleEvent.eventName, {\n      bubbles: true,\n    });\n  }\n}\n","/**\n * @param {HTMLElement} el\n * @returns {Promise<void>}\n */\nexport default async function requestFullscreen(el) {\n  if ('requestFullscreen' in el) {\n    return el.requestFullscreen({ navigationUI: 'hide' });\n  } else if ('webkitRequestFullscreen' in el) {\n    return el.webkitRequestFullscreen({ navigationUI: 'hide' });\n  }\n}\n","/**\n * @returns {Promise<void>}\n */\nexport default function exitFullscreen() {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  }\n}\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\n\n/**\n *\n * @example\n * ```html\n *  <full-screen-toggle>\n *    <button type=\"button\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen-toggle>\n * ```\n *\n * @customElement full-screen-toggle\n */\nexport default class FullScreenToggleElement extends HTMLElement {\n  static tagName = 'full-screen-toggle';\n\n  static behaviors = {\n    BUTTON: 'full-screen-toggle-button',\n    TEMPLATE: 'full-screen-toggle-template',\n  };\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n\n    if (document.fullscreenEnabled || document.webkitFullscreenEnabled) {\n      /** @type {HTMLTemplateElement} */\n      const template =\n        this.querySelector(\n          `template[data-behavior=\"${FullScreenToggleElement.behaviors.TEMPLATE}\"]`\n        ) || this.querySelector('template');\n\n      if (template) {\n        template.replaceWith(template.content.cloneNode(true));\n      }\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const toggleEl =\n      event.target.closest(\n        `[data-behavior=\"${FullScreenToggleElement.behaviors.TOGGLE}\"]`\n      ) || event.target.closest('button');\n\n    if (toggleEl) {\n      event.preventDefault();\n      this.dispatchEvent(new FullScreenToggleEvent());\n    }\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}