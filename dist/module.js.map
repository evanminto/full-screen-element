{"mappings":"ACwBe,uDAAgC,WAAW;IACxD,OAAO,OAAO,GAAG,aAAa,CAAC;IAE/B,qBAAqB,CACrB,CAAC,MAAM,GAAG,IAAI,CAAC;IAEf;;;;KAIG,CACH,IAAI,MAAM,GAAG;QACX,OAAO,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC;KAC3E;IAED,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;KACjC;IAED;;;;KAIG,CACH,MAAM,GAAG;QACP,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,AAAC;QAEnC,IAAI,QAAQ,CAAC,iBAAiB,KAAK,MAAM,EACvC,OAAO,QAAQ,CAAC,cAAc,EAAE,CAAC;aAEjC,OAAO,MAAM,CAAC,iBAAiB,CAAC;YAAE,YAAY,EAAE,MAAM;SAAE,CAAC,CAAC;KAE7D;IAED,iBAAiB,GAAG;QAClB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC9D;IAED;;KAEG,CACH,CAAA,CAAC,WAAW,CAAC,KAAK,EAAE;QAClB,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CACnC,sCAAsC,CACvC,AAAC;QAEF,IAAI,QAAQ,EAAE;YACZ,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;KACF;IAED;;KAEG,CACH,CAAA,CAAC,WAAW,GAAG;QACb,MAAM,QAAQ,GACZ,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,AAAC;QAEhE,OAAO,QAAQ,IAAI,IAAI,CAAC;KACzB;CACF;;ADrFD;AAEA,cAAc,CAAC,MAAM,CAAC,wCAAiB,CAAC,OAAO,EAAE,wCAAiB,CAAC,CAAC;IAEpE,wCAAiC,GAAlB,wCAAiB","sources":["src/index.js","src/FullScreenElement.js"],"sourcesContent":["import FullscreenElement from './FullscreenElement.js';\n\ncustomElements.define(FullscreenElement.tagName, FullscreenElement);\n\nexport default FullscreenElement;\n","/**\n * Adds behavior to a button so that when clicked, it requests fullscreen mode\n * for the target element.\n *\n * The target element is the `<full-screen>` element by default, but the\n * `target` attribute can be used to target a different element instead.\n *\n * The button must be a descendent of this element and have the attribute\n * `data-behavior=\"full-screen-toggle\"`.\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <button type=\"button\" data-behavior=\"full-screen-toggle\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n * @attr {String} target - ID of the HTML element to make fullscreen (optional)\n */\nexport default class FullscreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /** @type {String} */\n  #target = null;\n\n  /**\n   * ID of an element. If the ID is null, an empty string, or doesn't exist\n   * in the same document or shadow root as this element, this element\n   * will be the default target.\n   */\n  get target() {\n    return this.#target === null ? this.getAttribute('target') : this.#target;\n  }\n\n  set target(value) {\n    this.#target = value.toString();\n  }\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  toggle() {\n    const target = this.#getTargetEl();\n\n    if (document.fullscreenElement === target) {\n      return document.exitFullscreen();\n    } else {\n      return target.requestFullscreen({ navigationUI: 'hide' });\n    }\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const toggleEl = event.target.closest(\n      '[data-behavior=\"full-screen-toggle\"]'\n    );\n\n    if (toggleEl) {\n      event.preventDefault();\n      this.toggle();\n    }\n  }\n\n  /**\n   * @returns {HTMLElement}\n   */\n  #getTargetEl() {\n    const idTarget =\n      this.target && this.getRootNode().getElementById(this.target);\n\n    return idTarget || this;\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}