{"mappings":"MAwBe,MAAAA,UAAgCC,YAC7CC,eAAiB,cAGjBC,GAAU,KAONA,aACF,OAAwB,OAAjBC,MAAKD,EAAmBC,KAAKC,aAAa,UAAYD,MAAKD,EAGhEA,WAAOG,GACTF,MAAKD,EAAUG,EAAMC,WAQvBC,SACE,MAAML,EAASC,MAAKK,IAEpB,OAAIC,SAASC,oBAAsBR,EAC1BO,SAASE,iBAETT,EAAOU,kBAAkB,CAAEC,aAAc,SAIpDC,oBACEX,KAAKY,iBAAiB,QAASZ,MAAKa,EAAaC,KAAKd,OAGxDa,GAAaE,GACPA,EAAMhB,OAAOiB,QAAQ,yCACvBD,EAAME,iBACNjB,KAAKI,UAOTC,KAIE,OAFEL,KAAKD,QAAUC,KAAKkB,cAAcC,eAAenB,KAAKD,SAErCC,MC1EvBoB,eAAeC,OAAOzB,EAAkB0B,QAAS1B","sources":["src/FullScreenElement.js","src/index.js"],"sourcesContent":["/**\n * Adds behavior to a button so that when clicked, it requests fullscreen mode\n * for the target element.\n *\n * The target element is the `<full-screen>` element by default, but the\n * `target` attribute can be used to target a different element instead.\n *\n * The button must be a descendent of this element and have the attribute\n * `data-behavior=\"full-screen-click\"`.\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <button type=\"button\" data-behavior=\"full-screen-click\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n * @attr {String} target - ID of the HTML element to make fullscreen (optional)\n */\nexport default class FullscreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /** @type {String} */\n  #target = null;\n\n  /**\n   * ID of an element. If the ID is null, an empty string, or doesn't exist\n   * in the same document or shadow root as this element, this element\n   * will be the default target.\n   */\n  get target() {\n    return this.#target === null ? this.getAttribute('target') : this.#target;\n  }\n\n  set target(value) {\n    this.#target = value.toString();\n  }\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  toggle() {\n    const target = this.#getTargetEl();\n\n    if (document.fullscreenElement === target) {\n      return document.exitFullscreen();\n    } else {\n      return target.requestFullscreen({ navigationUI: 'hide' });\n    }\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n  }\n\n  #handleClick(event) {\n    if (event.target.matches('[data-behavior=\"full-screen-toggle\"')) {\n      event.preventDefault();\n      this.toggle();\n    }\n  }\n\n  /**\n   * @returns {HTMLElement}\n   */\n  #getTargetEl() {\n    const idTarget =\n      this.target && this.getRootNode().getElementById(this.target);\n\n    return idTarget || this;\n  }\n}\n","import FullscreenElement from './FullscreenElement.js';\n\ncustomElements.define(FullscreenElement.tagName, FullscreenElement);\n\nexport default FullscreenElement;\n"],"names":["$9c3985c9fa881060$export$2e2bcd8739ae039","HTMLElement","static","target","this","getAttribute","value","toString","toggle","getTargetEl","document","fullscreenElement","exitFullscreen","requestFullscreen","navigationUI","connectedCallback","addEventListener","handleClick","bind","event","matches","preventDefault","getRootNode","getElementById","customElements","define","tagName"],"version":3,"file":"index.js.map"}