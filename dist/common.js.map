{"mappings":"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","sources":["src/index.js","src/FullScreenElement.js","<<jsx-config-pragma.js>>","src/FullScreenToggleEvent.js","src/fullscreenAPI.js","src/requestFullscreen.js","src/exitFullscreen.js","src/FullScreenToggleElement.js"],"sourcesContent":["import FullScreenElement from './FullscreenElement';\nimport FullScreenToggleElement from './FullScreenToggleElement';\nimport FullScreenToggleEvent from './FullScreenToggleEvent';\n\ncustomElements.define(FullScreenElement.tagName, FullScreenElement);\ncustomElements.define(FullScreenToggleElement.tagName, FullScreenToggleElement);\n\nexport { FullScreenElement, FullScreenToggleElement, FullScreenToggleEvent };\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport fullscreenAPI from './fullscreenAPI';\n\n/**\n * Toggles fullscreen on itself in a cross-browser-compatible way when a\n * descendant element dispatches the `full-screen-toggle` event.\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <full-screen-toggle>\n *      <button type=\"button\">\n *        Toggle Fullscreen\n *      </button>\n *    </full-screen-toggle>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n */\nexport default class FullScreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  async toggle() {\n    const { element, exitFullscreen, requestFullscreen } = fullscreenAPI;\n\n    if (element === this) {\n      return exitFullscreen();\n    }\n\n    return requestFullscreen(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener(FullScreenToggleEvent.eventName, () => this.toggle());\n  }\n}\n",null,"export default class FullScreenToggleEvent extends Event {\n  static eventName = 'full-screen-toggle';\n\n  constructor() {\n    super(FullScreenToggleEvent.eventName, {\n      bubbles: true,\n      composed: true,\n    });\n  }\n}\n","import requestFullscreen from './requestFullscreen';\nimport exitFullscreen from './exitFullscreen';\n\nexport default {\n  get enabled() {\n    return document.fullscreenEnabled || document.webkitFullscreenEnabled;\n  },\n\n  /**\n   * @returns {Element}\n   */\n  get element() {\n    return document.fullscreenElement || document.webkitFullscreenElement;\n  },\n\n  requestFullscreen,\n  exitFullscreen,\n};\n","/**\n * @param {Element} el\n * @returns {Promise<void>}\n */\nexport default async function requestFullscreen(el) {\n  if ('requestFullscreen' in el) {\n    return el.requestFullscreen({ navigationUI: 'hide' });\n  } else if ('webkitRequestFullscreen' in el) {\n    return el.webkitRequestFullscreen({ navigationUI: 'hide' });\n  }\n}\n","/**\n * @returns {Promise<void>}\n */\nexport default function exitFullscreen() {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  }\n}\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport fullscreenAPI from './fullscreenAPI';\n\n/**\n * When the user clicks a button descendant of this element, it dispatches a\n * `full-screen-toggle` event.\n *\n * If a template is provided, it will only instantiate it if the browser\n * supports fullscreen.\n *\n * @example\n * ```html\n *  <full-screen-toggle>\n *    <button type=\"button\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen-toggle>\n * ```\n *\n * @customElement full-screen-toggle\n */\nexport default class FullScreenToggleElement extends HTMLElement {\n  /**\n   * @readonly\n   */\n  static tagName = 'full-screen-toggle';\n\n  /**\n   * @readonly\n   */\n  static behaviors = {\n    TEMPLATE: 'data-full-screen-toggle-template',\n    TRIGGER: 'data-full-screen-toggle-trigger',\n  };\n\n  connectedCallback() {\n    this.#addEventListeners();\n\n    if (fullscreenAPI.enabled) {\n      this.#cloneTemplate();\n    }\n  }\n\n  #addEventListeners() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n\n    const handleFullscreenChange = this.#handleFullscreenChange.bind(this);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n  }\n\n  #cloneTemplate() {\n    const fallbackToQS = (value, selector) =>\n      value || this.querySelector(selector);\n\n    const selectors = [\n      `template[${FullScreenToggleElement.behaviors.TEMPLATE}]`,\n      'template',\n    ];\n\n    /** @type {HTMLTemplateElement} */\n    const template = selectors.reduce(fallbackToQS, null);\n\n    if (!template) {\n      return;\n    }\n\n    template.replaceWith(template.content.cloneNode(true));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const customSelector = `[${FullScreenToggleElement.behaviors.TRIGGER}]`;\n    const hasCustomTrigger = Boolean(this.querySelector(customSelector));\n\n    const toggleEl = event.target.closest(\n      hasCustomTrigger ? customSelector : 'button'\n    );\n\n    if (toggleEl) {\n      event.preventDefault();\n      this.dispatchEvent(new FullScreenToggleEvent());\n    }\n  }\n\n  #handleFullscreenChange() {\n    const isFullscreen = Boolean(fullscreenAPI.element);\n\n    if (isFullscreen) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n"],"names":[],"version":3,"file":"common.js.map"}