{"mappings":"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","sources":["src/index.js","src/FullScreenElement.js","<<jsx-config-pragma.js>>","src/FullScreenToggleEvent.js","src/requestFullscreen.js","src/exitFullscreen.js","src/FullScreenToggleElement.js"],"sourcesContent":["import FullscreenElement from './FullscreenElement.js';\nimport FullScreenToggleElement from './FullScreenToggleElement.js';\n\ncustomElements.define(FullscreenElement.tagName, FullscreenElement);\ncustomElements.define(FullScreenToggleElement.tagName, FullScreenToggleElement);\n\nexport { FullscreenElement, FullScreenToggleElement };\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport requestFullscreen from './requestFullscreen';\nimport exitFullscreen from './exitFullscreen';\n\n/**\n *\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <full-screen-toggle>\n *      <button type=\"button\">\n *        Toggle Fullscreen\n *      </button>\n *    </full-screen-toggle>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n * @attr {String} target - ID of the HTML element to make fullscreen (optional)\n */\nexport default class FullScreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  async toggle() {\n    if (\n      document.fullscreenElement === this ||\n      document.webkitFullscreenElement === this\n    ) {\n      return exitFullscreen();\n    }\n\n    return requestFullscreen(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener(FullScreenToggleEvent.eventName, () => this.toggle());\n  }\n}\n",null,"export default class FullScreenToggleEvent extends Event {\n  static eventName = 'full-screen-toggle';\n\n  constructor() {\n    super(FullScreenToggleEvent.eventName, {\n      bubbles: true,\n    });\n  }\n}\n","/**\n * @param {HTMLElement} el\n * @returns {Promise<void>}\n */\nexport default async function requestFullscreen(el) {\n  if ('requestFullscreen' in el) {\n    return el.requestFullscreen({ navigationUI: 'hide' });\n  } else if ('webkitRequestFullscreen' in el) {\n    return el.webkitRequestFullscreen({ navigationUI: 'hide' });\n  }\n}\n","/**\n * @returns {Promise<void>}\n */\nexport default function exitFullscreen() {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  }\n}\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\n\n/**\n *\n * @example\n * ```html\n *  <full-screen-toggle>\n *    <button type=\"button\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen-toggle>\n * ```\n *\n * @customElement full-screen-toggle\n */\nexport default class FullScreenToggleElement extends HTMLElement {\n  static tagName = 'full-screen-toggle';\n\n  static behaviors = {\n    BUTTON: 'full-screen-toggle-button',\n    TEMPLATE: 'full-screen-toggle-template',\n  };\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n\n    if (document.fullscreenEnabled || document.webkitFullscreenEnabled) {\n      /** @type {HTMLTemplateElement} */\n      const template =\n        this.querySelector(\n          `template[data-behavior=\"${FullScreenToggleElement.behaviors.TEMPLATE}\"]`\n        ) || this.querySelector('template');\n\n      if (template) {\n        template.replaceWith(template.content.cloneNode(true));\n      }\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const toggleEl =\n      event.target.closest(\n        `[data-behavior=\"${FullScreenToggleElement.behaviors.TOGGLE}\"]`\n      ) || event.target.closest('button');\n\n    if (toggleEl) {\n      event.preventDefault();\n      this.dispatchEvent(new FullScreenToggleEvent());\n    }\n  }\n}\n"],"names":[],"version":3,"file":"common.js.map"}