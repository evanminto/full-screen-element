{"mappings":"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","sources":["src/index.js","src/FullScreenElement.js","<<jsx-config-pragma.js>>","src/FullScreenToggleEvent.js","src/requestFullscreen.js","src/exitFullscreen.js","src/FullScreenToggleElement.js"],"sourcesContent":["import FullScreenElement from './FullscreenElement';\nimport FullScreenToggleElement from './FullScreenToggleElement';\nimport FullScreenToggleEvent from './FullScreenToggleEvent';\n\ncustomElements.define(FullScreenElement.tagName, FullScreenElement);\ncustomElements.define(FullScreenToggleElement.tagName, FullScreenToggleElement);\n\nexport { FullScreenElement, FullScreenToggleElement, FullScreenToggleEvent };\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\nimport requestFullscreen from './requestFullscreen';\nimport exitFullscreen from './exitFullscreen';\n\n/**\n * Toggles fullscreen on itself in a cross-browser-compatible way when a\n * descendant element dispatches the `full-screen-toggle` event.\n *\n * @example\n * ```html\n *  <full-screen>\n *    <p>Fullscreenable content</p>\n *\n *    <full-screen-toggle>\n *      <button type=\"button\">\n *        Toggle Fullscreen\n *      </button>\n *    </full-screen-toggle>\n *  </full-screen>\n * ```\n *\n * @customElement full-screen\n * @attr {String} target - ID of the HTML element to make fullscreen (optional)\n */\nexport default class FullScreenElement extends HTMLElement {\n  static tagName = 'full-screen';\n\n  /**\n   * Toggles fullscreen on or off for the target element\n   *\n   * NOTE: This will fail unless called in the context of a user action\n   */\n  async toggle() {\n    if (\n      document.fullscreenElement === this ||\n      document.webkitFullscreenElement === this\n    ) {\n      return exitFullscreen();\n    }\n\n    return requestFullscreen(this);\n  }\n\n  connectedCallback() {\n    this.addEventListener(FullScreenToggleEvent.eventName, () => this.toggle());\n  }\n}\n",null,"export default class FullScreenToggleEvent extends Event {\n  static eventName = 'full-screen-toggle';\n\n  constructor() {\n    super(FullScreenToggleEvent.eventName, {\n      bubbles: true,\n      composed: true,\n    });\n  }\n}\n","/**\n * @param {HTMLElement} el\n * @returns {Promise<void>}\n */\nexport default async function requestFullscreen(el) {\n  if ('requestFullscreen' in el) {\n    return el.requestFullscreen({ navigationUI: 'hide' });\n  } else if ('webkitRequestFullscreen' in el) {\n    return el.webkitRequestFullscreen({ navigationUI: 'hide' });\n  }\n}\n","/**\n * @returns {Promise<void>}\n */\nexport default function exitFullscreen() {\n  if ('exitFullscreen' in document) {\n    return document.exitFullscreen();\n  } else if ('webkitExitFullscreen' in document) {\n    return document.webkitExitFullscreen();\n  }\n}\n","import FullScreenToggleEvent from './FullScreenToggleEvent';\n\n/**\n * When the user clicks a button descendant of this element, it dispatches a\n * `full-screen-toggle` event.\n *\n * If a template is provided, it will only instantiate it if the browser\n * supports fullscreen.\n *\n * The button and template can be customized via the `data-behavior` attribute,\n * with these values:\n *\n * - full-screen-toggle-button\n * - full-screen-toggle-template\n *\n * @example\n * ```html\n *  <full-screen-toggle>\n *    <button type=\"button\">\n *      Toggle Fullscreen\n *    </button>\n *  </full-screen-toggle>\n * ```\n *\n * @customElement full-screen-toggle\n */\nexport default class FullScreenToggleElement extends HTMLElement {\n  static tagName = 'full-screen-toggle';\n\n  static behaviors = {\n    BUTTON: 'full-screen-toggle-button',\n    TEMPLATE: 'full-screen-toggle-template',\n  };\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick.bind(this));\n    document.addEventListener(\n      'fullscreenchange',\n      this.#handleFullscreenChange.bind(this)\n    );\n\n    if (document.fullscreenEnabled || document.webkitFullscreenEnabled) {\n      /** @type {HTMLTemplateElement} */\n      const template =\n        this.querySelector(\n          `template[data-behavior=\"${FullScreenToggleElement.behaviors.TEMPLATE}\"]`\n        ) || this.querySelector('template');\n\n      if (template) {\n        template.replaceWith(template.content.cloneNode(true));\n      }\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  #handleClick(event) {\n    const toggleEl =\n      event.target.closest(\n        `[data-behavior=\"${FullScreenToggleElement.behaviors.TOGGLE}\"]`\n      ) || event.target.closest('button');\n\n    if (toggleEl) {\n      event.preventDefault();\n      this.dispatchEvent(new FullScreenToggleEvent());\n    }\n  }\n\n  #handleFullscreenChange() {\n    const isFullscreen = Boolean(\n      document.fullscreenElement || document.webkitFullscreenElement\n    );\n\n    if (isFullscreen) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n"],"names":[],"version":3,"file":"common.js.map"}